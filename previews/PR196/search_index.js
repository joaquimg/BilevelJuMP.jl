var documenterSearchIndex = {"docs":
[{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/DTMP_example1.jl\"","category":"page"},{"location":"examples/DTMP_example1/#Example-8","page":"Example 8","title":"Example 8","text":"","category":"section"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"This example is from the book Decomposition Techniques in Mathematical Programming Chapter 7.2, page 281, url","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Bold points in example: Here, we are using upperonly, loweronly for defining variables. Also, we are using equality in constraints. Using upperonly/loweronly will create variables that will appear in the proper model. By this definition, we might have slightly smaller reformulated models in the algorithm.","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Model of the problem First level","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"min -x + 4y + z\nnotag st\ny + 2x + z leq 9\nz = 1","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Second level","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"min -x - y + w\nnotag st\ny geq 0\nx + y + w leq 8\nx geq 0\nx leq 4\nx = 1","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Upper level variables","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@variable(Upper(model), x)\n@variable(UpperOnly(model), z)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Lower level variables","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@variable(Lower(model), y)\n@variable(LowerOnly(model), w)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Upper level objecive function","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@objective(Upper(model), Min, -x + 4y + z)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Upper level constraints","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@constraint(Upper(model), y + 2x + z <= 9)\n@constraint(Upper(model), z == 1)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Lower objective function","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@objective(Lower(model), Min, -x - y + w)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Lower constraints","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@constraint(Lower(model), y >= 0)\n@constraint(Lower(model), x + y + w <= 8)\n@constraint(Lower(model), x >= 0)\n@constraint(Lower(model), x <= 4)\n@constraint(Lower(model), w == 1)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Now we can solve the problem and verify the solution again that reported by book","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"optimize!(model)","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"Auto testing","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"@test value(x) ≈ 1 atol = 1e-2\n@test value(y) ≈ 6 atol = 1e-2\n@test value(z) ≈ 1 atol = 1e-2\n@test value(w) ≈ 1 atol = 1e-2","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"","category":"page"},{"location":"examples/DTMP_example1/","page":"Example 8","title":"Example 8","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example2.jl\"","category":"page"},{"location":"examples/FOBP_example2/#Foundations-of-Bilevel-Programming:-Example-2","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"","category":"section"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.2, Page 25. url Moving the bound on x to lower level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Model of the problem First level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"min 3x + y\nnotag st\nx leq 5\ny leq 8\ny geq 0","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Second level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"min -x\nnotag st\nx + y = 8\n4x + y = 8\n2x + y = 13\n2x - y = 0\nx = 5","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"First we need to define all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@variable(Upper(model), y, start = 8 / 15)\n@variable(Lower(model), x, start = 3.5 * 8 / 15)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Then we can add the objective and constraints of the upper problem: Upper level objective function","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@objective(Upper(model), Min, 3x + y)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Upper level constraints","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@constraints(Upper(model), begin\n    u1, x <= 5\n    u2, y <= 8\n    u3, y >= 0\nend)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Followed by the objective and constraints of the lower problem: Lower level objective function","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@objective(Lower(model), Min, -x)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Lower level constraints","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@constraint(Lower(model), l1, x + y <= 8)\n@constraint(Lower(model), l2, 4x + y >= 8)\n@constraint(Lower(model), l3, 2x + y <= 13)\n@constraint(Lower(model), l4, 2x - 7y <= 0)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"tip: Tip\nYou can use the singular @constraint macro or the plural @constraints!","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"We can also set hints for the variables associated with the problems.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"In this example, we know the duals on the lower constraints are in the set [-15, 15]:","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"for c in [l1, l2, l3, l4]\n    BilevelJuMP.set_dual_upper_bound_hint(c, 15)\n    BilevelJuMP.set_dual_lower_bound_hint(c, -15)\nend","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"While we think the primal variables are in [-10, 6] for x and [-1, 9] for y. These hints are optional. But supplying them (e.g., from domain knowledge) can be helpful for the solver.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"BilevelJuMP.set_primal_lower_bound_hint(x, -10)\nBilevelJuMP.set_primal_upper_bound_hint(x, 6)\nBilevelJuMP.set_primal_lower_bound_hint(y, -1)\nBilevelJuMP.set_primal_upper_bound_hint(y, 9)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"optimize!(model)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Automated testing","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@test objective_value(model) ≈ 3 * (3.5 * 8 / 15) + (8 / 15) atol = 1e-4\n@test BilevelJuMP.lower_objective_value(model) ≈ -3.5 * 8 / 15 atol = 1e-4\n@test objective_value(Lower(model)) ≈ -3.5 * 8 / 15 atol = 1e-4\n@test value(x) ≈ 3.5 * 8 / 15 atol = 1e-4\n@test value(y) ≈ 8 / 15 atol = 1e-4\n@test value(u1) ≈ 3.5 * 8 / 15 atol = 1e-4\n@test value(l1) ≈ 4.5 * 8 / 15 atol = 1e-4\n@test dual(l1) ≈ [0] atol = 1e-4\n@test dual(l3) ≈ [0] atol = 1e-4","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example2.2.jl\"","category":"page"},{"location":"examples/FOBP_example2.2/#Foundations-of-Bilevel-Programming:-Example-2.1","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"","category":"section"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.2, Page 25. url Moving the bound on x to lower level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Model of the problem","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"First level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Min 3x + y\ns.t.\n0 <= y <=8","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Second level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Min -x\ns.t.\nx + y <= 8\n4x + y >= 8\n2x + y <= 13\n2x - y <= 0\nx <= 5","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@variable(Lower(model), x, start = 3.5 * 8 / 15)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@variable(Upper(model), y, start = 8 / 15)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@objective(Upper(model), Min, 3x + y)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@constraint(Upper(model), y <= 8)\n@constraint(Upper(model), y >= 0)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@objective(Lower(model), Min, -x)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@constraint(Lower(model), x + y <= 8)\n@constraint(Lower(model), 4x + y >= 8)\n@constraint(Lower(model), 2x + y <= 13)\n@constraint(Lower(model), 2x - 7y <= 0)\n@constraint(Lower(model), x <= 5)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"optimize!(model)\n\n@test objective_value(model) ≈ 3 * (3.5 * 8 / 15) + (8 / 15) atol = 1e-3\n@test value(x) ≈ 3.5 * 8 / 15 atol = 1e-6\n@test value(y) ≈ 8 / 15 atol = 1e-6","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/tutorials/quad_to_bin.jl\"","category":"page"},{"location":"tutorials/quad_to_bin/#Using-QuadraticToBinary","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"","category":"section"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"QuadraticToBinary.jl is a package that converts quadratic terms in constraints and objective. To do so the pack acts like a solver on top of the real solver and most data is forwarded directly to the solver itself. For many solvers it is enough to use:","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"using BilevelJuMP, QuadraticToBinary, HiGHS\n\nSOLVER = HiGHS.Optimizer()\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(SOLVER, lb = -10, ub = 10)\nmodel = BilevelModel(()->Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-6))\n\n@variable(Lower(model), x)\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n@constraints(Upper(model), begin\n    x <= 5\n    y <= 8\n    y >= 0\nend)\n\n@objective(Lower(model), Min, -x)\n@constraints(Lower(model), begin\n     x +  y <= 8\n    4x +  y >= 8\n    2x +  y <= 13\n    2x - 7y <= 0\nend)\n\noptimize!(model)\n\nobjective_value(model)\n@assert abs(objective_value(model) - (3 * (3.5 * 8/15) + 8/15)) < 1e-1 # src","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"However, this might lead to some solver not supporting certain functionality like SCIP. In this case we need to:","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"SOLVER = SCIP.Optimizer()\nCACHED_SOLVER = MOI.Utilities.CachingOptimizer(\n    MOI.Utilities.UniversalFallback(MOI.Utilities.Model{Float64}()), SOLVER)\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(CACHED_SOLVER)\nBilevelModel(()->Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"Note that we used ()->Q_SOLVER instead of just Q_SOLVER because BilevelModel requires as constructor and not an instance of an object.","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"info: Info\nThis code was not executed to avoid excessive dependencies to build these docs.","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"info: Info\nView this file on Github.","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"","category":"page"},{"location":"tutorials/quad_to_bin/","page":"Using QuadraticToBinary","title":"Using QuadraticToBinary","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example5.jl\"","category":"page"},{"location":"examples/FOBP_example5/#Foundations-of-Bilevel-Programming:-Example-5","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"","category":"section"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 8.1, Page 255. url","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Here, only the second level is described","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Model of the problem First level","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"min 0","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Second level","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"min x\nnotag st\nx+y leq 2\nx-y leq 2\n-4x+5y leq 10\n-4x-5y leq 10","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Global variables","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"atol = 1e-3","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Upper level variables","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"@variable(Upper(model), y, start = 0)\n\n#Lower level variables\n@variable(Lower(model), x, start = 0)","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Upper level objecive function","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"@objective(Upper(model), Min, 0 * y + 0)","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Lower objective function","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"@objective(Lower(model), Min, x)","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Lower constraints","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"@constraint(Lower(model), x + y <= 2)\n@constraint(Lower(model), x - y <= 2)\n@constraint(Lower(model), -4x + 5y <= 10)\n@constraint(Lower(model), -4x - 5y <= 10)","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"","category":"page"},{"location":"examples/FOBP_example5/","page":"Foundations of Bilevel Programming: Example 5","title":"Foundations of Bilevel Programming: Example 5","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/PHTP_example2.jl\"","category":"page"},{"location":"examples/PHTP_example2/#Example-7","page":"Example 7","title":"Example 7","text":"","category":"section"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"This example is from the book Princeton Handbook of Test Problems in Local and Global Optimization Dempe, Chapter 9.3.2 -parg 223 url","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Here, only the second level is described","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Model of the problem First level","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"min 2x_1+2x_2-3y_1-3y_2-60\nnotag st\nx_1 + x_2 + y_1 -2y_2 -40leq 0\n0 leq x_i leq 50 forall i in I\n-10 leq y_j leq 20 forall j in J","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Second level","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"min (-x_1 + y_1 + 40)^2 + (-x_2 + y_2 + 20)^2\nnotag st\n- x_i + 2y_j = -10forall (ij) in (ij)iin I jin J i=j\n-10 leq y_j leq 20 forall j in J","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Upper level variables","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@variable(Upper(model), x[i = 1:2], start = 0)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Lower level variables","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@variable(Lower(model), y[i = 1:2], start = -10)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Upper level objecive function","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@objective(Upper(model), Min, 2x[1] + 2x[2] - 3y[1] - 3y[2] - 60)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Upper level constraints","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@constraint(Upper(model), x[1] + x[2] + y[1] - 2y[2] - 40 <= 0)\n@constraint(Upper(model), [i = 1:2], x[i] >= 0)\n@constraint(Upper(model), [i = 1:2], x[i] <= 50)\n@constraint(Upper(model), [i = 1:2], y[i] >= -10)\n@constraint(Upper(model), [i = 1:2], y[i] <= 20)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Lower objective function","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@objective(Lower(model), Min, (-x[1] + y[1] + 40)^2 + (-x[2] + y[2] + 20)^2)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Lower constraints","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@constraint(Lower(model), [i = 1:2], -x[i] + 2y[i] <= -10)\n@constraint(Lower(model), [i = 1:2], y[i] >= -10)\n@constraint(Lower(model), [i = 1:2], y[i] <= 20)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Now we can solve the problem and verify the solution again that reported by the book","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"Auto testing","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"@test objective_value(model) ≈ 0 atol = 1e-3\nsol = vcat(value.(x), value.(y))\n@test sol ≈ [0; 0; -10; -10] || sol ≈ [0; 30; -10; 10] #atol=1e-3","category":"page"},{"location":"examples/PHTP_example2/#Like-any-other-optimization-problem,-there-is-a-chance-in-bilevel-optimization-to-find-multiple-solutions-with-the-same-optimal-value;-based-on-the-inherent-stochasticity-of-the-algorithm-and-random-seed,-we-are-expecting-two-optimal-solutions-for-this-problem.","page":"Example 7","title":"Like any other optimization problem, there is a chance in bilevel optimization to find multiple solutions with the same optimal value; based on the inherent stochasticity of the algorithm and random seed, we are expecting two optimal solutions for this problem.","text":"","category":"section"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"","category":"page"},{"location":"examples/PHTP_example2/","page":"Example 7","title":"Example 7","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/SOCBLP_example1.jl\"","category":"page"},{"location":"examples/SOCBLP_example1/#Example-10","page":"Example 10","title":"Example 10","text":"","category":"section"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"This example is from The models of bilevel programming with lower level second-order cone programs (url or url) SOCBLP stands for bilevel programming problem with lower level second-order cone program Bold point(s): Using second-order cone in the lower level problem","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Model of the problem First level","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"min x + 3(y_1-y_2)\nnotag st\n2 leq x leq 6","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Second level","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"min - y_1 + y_2\nnotag st\ny_1 - y_2 leq  8\n4y_1 - 4y_2 geq  8\n2y_1 - 2y_2 leq  12\ny_1 geq 0\ny_2 geq 0\ny in K^2","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Here, K^2 is second order cone and it represents:","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"y in y=(y_1y_2)in mathbbRtimes mathbbRy_1 geq y_2_2","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(\n    () -> MOI.Bridges.Constraint.SOCtoNonConvexQuad{Float64}(Ipopt.Optimizer());\n    mode = BilevelJuMP.ProductMode(1e-9),\n)","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Upper level variables","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"@variable(Upper(model), x)\n\n#Lower level variables\n@variable(Lower(model), y[i = 1:2])","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Upper level objecive function","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"@objective(Upper(model), Min, x + 3(y[1] - y[2]))","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Upper level constraints","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"@constraint(Upper(model), x >= 2)\n@constraint(Upper(model), x <= 6)","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Lower objective function","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"@objective(Lower(model), Min, -(y[1] - y[2]))","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Lower constraints","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"@constraint(Lower(model), lb_y_1, y[1] >= 0)\n@constraint(Lower(model), lb_y_2, y[2] >= 0)\n@constraint(Lower(model), con1, x + (y[1] - y[2]) <= 8)\n@constraint(Lower(model), con2, x + 4(y[1] - y[2]) >= 8)\n@constraint(Lower(model), con3, x + 2(y[1] - y[2]) <= 12)\n@constraint(Lower(model), soc_lw, y in SecondOrderCone())","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Defining bounds","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"BilevelJuMP.set_dual_upper_bound_hint(soc_lw, +[5.0, 5.0])\nBilevelJuMP.set_dual_lower_bound_hint(soc_lw, -[5.0, 5.0])","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"require lower bounds","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"for con in [con1, con3]\n    BilevelJuMP.set_dual_lower_bound_hint(con, -15)\nend","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"require upper bounds","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"for con in [lb_y_1, lb_y_2, con2]\n    BilevelJuMP.set_dual_upper_bound_hint(con, +15)\nend","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"bounds defined in the upper level are not dualized","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"for i in 1:2\n    @constraint(Upper(model), y[i] in MOI.LessThan(+5.0))\n    @constraint(Upper(model), y[i] in MOI.GreaterThan(-5.0))\nend","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"Now we can solve the problem and verify the solution again that reported by","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)\n\nvalue.(y)\n\n@test objective_value(model) ≈ 12 atol = 1e-1\n@test value(x) ≈ 6 atol = 1e-3\n@test value(y[2]) >= 0 - 1e-3\n@test value(y[1]) - value(y[2]) ≈ 2 atol = 1e-3","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"","category":"page"},{"location":"examples/SOCBLP_example1/","page":"Example 10","title":"Example 10","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/MibS_example1.jl\"","category":"page"},{"location":"examples/MibS_example1/#Example-on-MibS","page":"Example on MibS","title":"Example on MibS","text":"","category":"section"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"This example is from ????","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Model of the problem First level","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"min_x -3x -7y\nnotag st\n-3x + 2y leq 12\nx + 2y leq 20\nx leq 10\nx in mathbbZ","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Second level","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"min_y y\nnotag st\n2x - y = 7\n-2x + 4y = 16\ny = 5\ny in mathbbZ","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"using BilevelJuMP\nusing Test\nusing MibS_jll\n\nmodel = BilevelModel()","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Upper level variables","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@variable(Upper(model), x, Int)\n\n#Lower level variables\n@variable(Lower(model), y, Int)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Upper level objecive function","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@objective(Upper(model), Min, -3x - 7y)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Upper constraints","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@constraints(Upper(model), begin\n    u1, -3x + 2y <= 12\n    u2, x + 2y <= 20\n    u3, x <= 10\nend)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Lower objective function","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@objective(Lower(model), Min, y)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Lower constraints","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@constraint(Lower(model), l1, 2x - y <= 7)\n@constraint(Lower(model), l2, -2x + 4y <= 16)\n@constraint(Lower(model), l3, y <= 5)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Using MibS Solver","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"solution = BilevelJuMP.solve_with_MibS(model, MibS_jll.mibs)","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"Auto testing","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"@test solution.status == true\n@test solution.objective ≈ -53\n@test solution.nonzero_upper == Dict(0 => 6.0)\n@test solution.nonzero_lower == Dict(0 => 5.0)\n@test solution.all_upper[\"x\"] == 6.0\n@test solution.all_lower[\"y\"] == 5.0","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"","category":"page"},{"location":"examples/MibS_example1/","page":"Example on MibS","title":"Example on MibS","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/tutorials/lower_duals.jl\"","category":"page"},{"location":"tutorials/lower_duals/#Dual-variables-of-the-lower-level","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"","category":"section"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"This is a quick introduction to modeling and solving bilevel optimization with BilevelJuMP.","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"This modeling feature enables the implementation of workflows where one (or more) of the upper-level variables is the dual of a lower-level constraint. In particular, in the energy sector, it is common to model the energy prices as the dual variable associated with the energy demand equilibrium constraint. One example of an application that uses this feature is Fanzeres et al. (2019), which focuses on strategic bidding in auction-based energy markets. A small and simplified example of the modeled problem would be the model:","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"beginalign\n    max_lambda q_S quad lambda cdot g_S \n    textitst quad 0 leq q_S leq 100\n    hspace28pt (g_S lambda) in argmin_g_S g_1 g_2 g_D 50 g_R1 + 100  g_R2 + 1000 g_D\n             hspace70pt textitst quad g_S leq q_S \n             hspace88pt quad  0 leq g_S leq 100 \n             hspace88ptquad  0 leq g_1 leq 40 \n             hspace88ptquad  0 leq g_2 leq 40 \n             hspace88ptquad  0 leq g_D leq 100 \n     hspace88ptquad  g_S + g_1 + g_2 + g_D = 100 quad   quad lambda labeleq-dual-lambda\nendalign","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"Where lambda is the dual of the load balance constraint (last constraint in the lower part), g_S, g_1, g_2 represent the generation of the strategic bidder and from two other (non-strategic) plants. g_D represents the deficit in generation. Finally, q_S is the quantity bid optimized by the strategic generator.","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"load packages","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"using BilevelJuMP\nusing Ipopt\nusing QuadraticToBinary\nusing HiGHS","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"BilevelJuMP.jl allows users to implement similar models using the function DualOf that binds a new variable in the upper level to an existing constraint in the lower level. The model can be written as:","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"model = BilevelModel()\n@variable(Upper(model), 0 <= qS <= 100)\n@variable(Lower(model), 0 <= gS <= 100)\n@variable(Lower(model), 0 <= gR1 <= 40)\n@variable(Lower(model), 0 <= gR2 <= 40)\n@variable(Lower(model), 0 <= gD <= 100)\n@objective(Lower(model), Min, 50gR1 + 100gR2 + 1000gD)\n@constraint(Lower(model), gS <= qS)\n@constraint(Lower(model), demand_equilibrium, gS + gR1 + gR2 + gD == 100)\n@variable(Upper(model), lambda, DualOf(demand_equilibrium))\n@objective(Upper(model), Max, lambda*gS)","category":"page"},{"location":"tutorials/lower_duals/#NLP-solution","page":"Dual variables of the lower level","title":"NLP solution","text":"","category":"section"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"This model, can be solved by selecting a reformulation and a solver. Here we select Strong-Duality reformulation, the Ipopt solver and call optimizes to perform the reformulation and solve it.","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"BilevelJuMP.set_mode(model, BilevelJuMP.StrongDualityMode())\nset_optimizer(model, Ipopt.Optimizer)\noptimize!(model)","category":"page"},{"location":"tutorials/lower_duals/#MIP-solution","page":"Dual variables of the lower level","title":"MIP solution","text":"","category":"section"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"It is also possible to solve such problem by using a MIP formulation. The main issue is the product of variable in the upper level objective. However, this can be easily handled by using the package QuadraticToBinary.jl for automatic binary expansions. Because binary expansions require bounds on variables, we add the following lines:","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"set_lower_bound(lambda, 0.0)\nset_upper_bound(lambda, 1000.0)","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"Then, as before, we set a solver (now SCIP with the QuadraticToBinary.jl wrapper) and a solution method (now Fortuny-Amat and McCarl):","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"set_optimizer(model,\n    ()->QuadraticToBinary.Optimizer{Float64}(HiGHS.Optimizer()))\nBilevelJuMP.set_mode(model,\n    BilevelJuMP.FortunyAmatMcCarlMode(dual_big_M = 100))\noptimize!(model)","category":"page"},{"location":"tutorials/lower_duals/#More-on-DualOf-usage","page":"Dual variables of the lower level","title":"More on DualOf usage","text":"","category":"section"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"You might have a problem where you want duals of a vector of constraints like:","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"@constraint(Lower(model), reserves[i=1:3], (40 - gR1) + (40 - gR2) == 10 * i)","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"then you can do","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"@variable(Upper(model), reserve_dual[i=1:3], DualOf(reserves[i]))","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"or use anonymous variables","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"my_duals = []\nfor i in 1:3\n    var = @variable(Upper(model), variable_type = DualOf(reserves[i]))\n    push!(my_duals, var)\nend\nmy_duals","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"info: Info\nView this file on Github.","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"","category":"page"},{"location":"tutorials/lower_duals/","page":"Dual variables of the lower level","title":"Dual variables of the lower level","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example3.jl\"","category":"page"},{"location":"examples/FOBP_example3/#Foundations-of-Bilevel-Programming:-Example-3","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"","category":"section"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.7, Page 59. url","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Model of the problem","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"First level","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"min sum_iin I x_i - z\nnotag st\ny^a_igeq 0 forall i in I\ny^a_ileq 1 forall i in I\ny^b_igeq 0 forall i in I\ny^b_ileq 1 forall i in I\ny^a_i + y^b_i = 1 forall i in I\nzgeq 0\nzleq 1\ny^a_1 + y^a_2 + y^a_3 geq z\n-y^b_1 - y^b_4 + y^a_3 geq z\ny^b_7 - y^b_6 + y^a_4 geq z\ny^a_5 + y^a_6 + y^a_7 geq z","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Second level","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"min -sum_iin Ix_i\nnotag st\nsum x_i geq 0\nx_i leq y^a_i forall iin I\nx_i leq y^b_i forall iin I\nI = 17","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Global variables","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"I = 7 # maximum literals\nclauses = [[1, 2, 3], [-1, -4, 3], [7, -6, 4], [5, 6, 7]]\natol = 1e-6","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level variables","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@variable(Upper(model), ya[i = 1:I])\n@variable(Upper(model), yb[i = 1:I])\n@variable(Upper(model), z)\n\n#Lower level variables\n@variable(Lower(model), x[i = 1:I])","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level objecive function","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@objective(Upper(model), Min, sum(x[i] for i in 1:I) - z)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level constraints","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(Upper(model), ca, z <= 1)\n@constraint(Upper(model), cb, z >= 0)\n@constraint(Upper(model), c1[i = 1:I], ya[i] >= 0)\n@constraint(Upper(model), c2[i = 1:I], ya[i] <= 1)\n@constraint(Upper(model), c3[i = 1:I], yb[i] >= 0)\n@constraint(Upper(model), c4[i = 1:I], yb[i] <= 1)\n@constraint(Upper(model), c5[i = 1:I], ya[i] + yb[i] == 1)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"for c in clauses","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(\n    Upper(model),\n    cc[k in eachindex(clauses)],\n    sum(i > 0 ? ya[i] : yb[-i] for i in clauses[k]) >= z\n)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Lower objective function","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@objective(Lower(model), Min, -sum(x[i] for i in 1:I))","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Lower constraints","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(Lower(model), b1[i = 1:I], x[i] >= 0)\n@constraint(Lower(model), b2[i = 1:I], x[i] <= ya[i])\n@constraint(Lower(model), b3[i = 1:I], x[i] <= yb[i])","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Initial Starting conditions","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"JuMP.set_start_value.(x, 0)\nJuMP.set_start_value.(ya, 1)\nJuMP.set_start_value.(yb, 0)\nJuMP.set_start_value(z, 1)\nfor i in 1:I\n    JuMP.set_dual_start_value.(b1, 0)\n    JuMP.set_dual_start_value.(b2, 0)\n    JuMP.set_dual_start_value.(b3, -1)\nend","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Auto testing","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@test objective_value(model) ≈ -1 atol = atol\n@test value.(x) ≈ zeros(I) atol = atol\n@test value.(ya) ≈ ones(I) atol = atol\n@test value.(yb) ≈ zeros(I) atol = atol\n@test value(z) ≈ 1 atol = atol","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@show dual.(b1) #≈ 6 atol=atol @show dual.(b2) #≈ 2 atol=atol @show dual.(b3) #≈ 2 atol=atol","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"This page was generated using Literate.jl.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cbc has known bugs in its SOS1 constraints, so BilevelJuMP.SOS1Mode might","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"not work properly with Cbc.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For anonymous variables with DualOf use:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"@variable(Upper(model, variable_type = DualOf(my_lower_constraint)))","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Nonconvex/nonconcave/nonpsd objective/constraint error in a MIP solver.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you are using Gurobi use:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"model = BilevelModel(Gurobi.Optimizer, mode = BilevelJuMP.SOS1Mode()) #or other mode\nset_optimizer_attribute(model, \"NonConvex\", 2)","category":"page"},{"location":"reference/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"This section documents the BilevelJuMP API.","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"As a JuMP extension, most JuMP functions should just work. Some JuMP function will return error saying they are not implemented for BileveJuMP structures such as BilevelModel. If that happens and you consider that function should be implemented, please, open an issue.","category":"page"},{"location":"reference/#Constructors","page":"API Reference","title":"Constructors","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelModel\nUpper\nLower\nDualOf","category":"page"},{"location":"reference/#BilevelJuMP.BilevelModel","page":"API Reference","title":"BilevelJuMP.BilevelModel","text":"BilevelModel()\n\nCreate an empty BilevelModel with default settings, no solver and no solve mode.\n\nExample\n\njulia> model = BilevelModel()\n\nBilevelModel(solver::Function; mode = BilevelJuMP.SOS1Mode(), add_bridges::Bool = true)\n\nCreate a BilevelModel with the given solver and solve mode.\n\nsolver: is a functions that takes no arguments and returns a JuMP solver object.\nmode: is a solve mode object that defines how the model is solved.\nadd_bridges: if true (default) then bridges are added to the model. If false then bridges are not added and the model is not modified.\n\nExample\n\njulia> model = BilevelModel(\n    HiGHS.Optimizer,\n    mode = BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 1e6, dual_big_M = 1e6))\n\nwhich is equivalent to\n\njulia> model = BilevelModel(\n    ()->HiGHS.Optimizer(),\n    mode = BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 1e6, dual_big_M = 1e6))\n\nand equivalent to\n\njulia> model = BilevelModel()\n\njulia> BilevelJuMP.set_solver(model, HiGHS.Optimizer)\n\njulia> BilevelJuMP.set_mode(model, BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 1e6, dual_big_M = 1e6))\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.Upper","page":"API Reference","title":"BilevelJuMP.Upper","text":"Upper(model::BilevelModel)\n\nCreate a reference to the upper level of a bilevel model.\n\nExample\n\njulia> model = BilevelModel();\n\njulia> @variable(Upper(model), x >= 0)\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.Lower","page":"API Reference","title":"BilevelJuMP.Lower","text":"Lower(model::BilevelModel)\n\nCreate a reference to the lower level of a bilevel model.\n\nExample\n\njulia> model = BilevelModel();\n\njulia> @variable(Lower(model), x >= 0)\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.DualOf","page":"API Reference","title":"BilevelJuMP.DualOf","text":"DualOf(constraint::ConstraintRef)\n\nGet the dual variable associated with a constraint. This is only valid for constraints in the upper level of a bilevel model.\n\nExamples\n\njulia> m = BilevelModel();\n\njulia> @variable(Lower(m), x >= 0);\n\njulia> @constraint(Lower(m), c, x <= 1);\n\njulia> @variable(Upper(m), y, DualOf(c));\n\n\n\n\n\n","category":"type"},{"location":"reference/#Advanced-constructors","page":"API Reference","title":"Advanced constructors","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"UpperOnly\nLowerOnly","category":"page"},{"location":"reference/#BilevelJuMP.UpperOnly","page":"API Reference","title":"BilevelJuMP.UpperOnly","text":"UpperOnly(model::BilevelModel)\n\nCreate a special reference to the upper level of a bilevel model. Variables created with this reference will not be shared with the lower level.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.LowerOnly","page":"API Reference","title":"BilevelJuMP.LowerOnly","text":"LowerOnly(model::BilevelModel)\n\nCreate a special reference to the lower level of a bilevel model. Variables created with this reference will not be shared with the upper level.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Enums","page":"API Reference","title":"Enums","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelJuMP.Level\nBilevelJuMP.LOWER_BOTH\nBilevelJuMP.UPPER_BOTH\nBilevelJuMP.LOWER_ONLY\nBilevelJuMP.UPPER_ONLY\nBilevelJuMP.DUAL_OF_LOWER","category":"page"},{"location":"reference/#BilevelJuMP.Level","page":"API Reference","title":"BilevelJuMP.Level","text":"Level\n\nThe level of a variable in a bilevel problem.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.LOWER_BOTH","page":"API Reference","title":"BilevelJuMP.LOWER_BOTH","text":"Indicates and object that is part of the lower level problem, but is shared with the upper level.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#BilevelJuMP.UPPER_BOTH","page":"API Reference","title":"BilevelJuMP.UPPER_BOTH","text":"Indicates and object that is part of the upper level problem, but is shared with the lower level.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#BilevelJuMP.LOWER_ONLY","page":"API Reference","title":"BilevelJuMP.LOWER_ONLY","text":"Indicates and object that is part of the lower level problem, but is not shared with the upper level.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#BilevelJuMP.UPPER_ONLY","page":"API Reference","title":"BilevelJuMP.UPPER_ONLY","text":"Indicates and object that is part of the upper level problem, but is not shared with the lower level.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#BilevelJuMP.DUAL_OF_LOWER","page":"API Reference","title":"BilevelJuMP.DUAL_OF_LOWER","text":"Indicates and object that is part of the dual of the lower level problem, and is shared with the upper level.\n\n\n\n\n\n","category":"constant"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelJuMP.IndicatorSetting\nBilevelJuMP.ZERO_ONE\nBilevelJuMP.ZERO_ZERO\nBilevelJuMP.ONE_ZERO","category":"page"},{"location":"reference/#BilevelJuMP.IndicatorSetting","page":"API Reference","title":"BilevelJuMP.IndicatorSetting","text":"IndicatorSetting\n\nThe type of indicator function to use in the IndicatorMode mode.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.ZERO_ONE","page":"API Reference","title":"BilevelJuMP.ZERO_ONE","text":"Activates the indicator constraint on the primal constraint if the auxiliaty binary is zero and activates the indicator constraint on the dual variable if the auxiliary binary is one.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#BilevelJuMP.ZERO_ZERO","page":"API Reference","title":"BilevelJuMP.ZERO_ZERO","text":"Activates the indicator constraint on the primal constraint if the auxiliaty binary is zero and activates the indicator constraint on the dual variable if the auxiliary binary is zero.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#Structs","page":"API Reference","title":"Structs","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelVariableRef\nBilevelAffExpr\nBilevelQuadExpr","category":"page"},{"location":"reference/#BilevelJuMP.BilevelVariableRef","page":"API Reference","title":"BilevelJuMP.BilevelVariableRef","text":"BilevelVariableRef\n\nHolds a reference to a variable in a bilevel model.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.BilevelAffExpr","page":"API Reference","title":"BilevelJuMP.BilevelAffExpr","text":"BilevelVariableRef\n\nAlias for GenericAffExpr{Float64,BilevelVariableRef}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.BilevelQuadExpr","page":"API Reference","title":"BilevelJuMP.BilevelQuadExpr","text":"BilevelQuadExpr\n\nAlias for GenericQuadExpr{Float64,BilevelVariableRef}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Modes","page":"API Reference","title":"Modes","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelJuMP.SOS1Mode\nBilevelJuMP.FortunyAmatMcCarlMode\nBilevelJuMP.IndicatorMode\nBilevelJuMP.ProductMode\nBilevelJuMP.StrongDualityMode\nBilevelJuMP.ComplementMode\nBilevelJuMP.MixedMode","category":"page"},{"location":"reference/#BilevelJuMP.SOS1Mode","page":"API Reference","title":"BilevelJuMP.SOS1Mode","text":"SOS1Mode()\n\nUsed to solve a bilevel problem with the MPEC reformulation using SOS1 constraints to convert complementarity constraints into mixed-integer constraints.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.FortunyAmatMcCarlMode","page":"API Reference","title":"BilevelJuMP.FortunyAmatMcCarlMode","text":"FortunyAmatMcCarlMode\n\nSee BigMMode for more details.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.IndicatorMode","page":"API Reference","title":"BilevelJuMP.IndicatorMode","text":"IndicatorMode(method::IndicatorSetting = BilevelJuMP.ONE_ONE)\n\nUsed to solve a bilevel problem with the MPEC reformulation using indicator constaints to convert complementarity constraints to a mixed integer formulation.\n\nmethod indicates how the indicator constraints are activated for primal cosntraints and dual variables. See IndicatorSetting for more details.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.ProductMode","page":"API Reference","title":"BilevelJuMP.ProductMode","text":"ProductMode(epsilon = 0.0; with_slack = false, aggregation_group = nothing)\n\nUsed to solve a bilevel problem with the MPEC reformulation using products  to convert complementarity constraints into non-convex quadratic constraints.\n\nwith_slack indicates whether to use slack variables to reformulate the complementarity constraints. Given a pair expr and var, the reformulation is expr == slack and var * slack == 0 instead of expr * slack == 0.\naggregation_group indicates whether to aggregate the products into a single quadratic constraint. If aggregation_group is nothing, then each product is converted into a quadratic constraint. If aggregation_group is a positive integer, then products with the same aggregation_group are aggregated into a single quadratic constraint.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.StrongDualityMode","page":"API Reference","title":"BilevelJuMP.StrongDualityMode","text":"StrongDualityMode(eps = 0.0, inequality = true)\n\nA mode that adds a strong duality constraint of the lower level problem instead of reformulating the complementarity constraints.\n\neps: The tolerance for the strong duality constraint. Defaults to 0.0.\ninequality: If true the strong duality constraint is added as two inequality constraints. If false the strong duality constraint is added as an equality constraint. Defaults to true.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.ComplementMode","page":"API Reference","title":"BilevelJuMP.ComplementMode","text":"ComplementMode(; with_slack = false)\n\nUsed to solve a bilevel problem with the MPEC reformulation using actual complementarity constraints. A limited number of solvers support this mode. One example is Knitro.\n\nwith_slack indicates whether to use slack variables to reformulate the complementarity constraints. Given a pair expr and var, the reformulation is expr == slack and var ⟂ slack instead of expr ⟂ slack.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BilevelJuMP.MixedMode","page":"API Reference","title":"BilevelJuMP.MixedMode","text":"MixedMode(; default = SOS1Mode())\n\nA mode that allows to mix different modes for different constraints and variables.\n\ndefault is the default mode to use for all constraints and variables that are not explicitly mapped to a mode.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Bound-hints","page":"API Reference","title":"Bound hints","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelJuMP.set_dual_upper_bound_hint\nBilevelJuMP.get_dual_upper_bound_hint\nBilevelJuMP.set_dual_lower_bound_hint\nBilevelJuMP.get_dual_lower_bound_hint\nBilevelJuMP.set_primal_upper_bound_hint\nBilevelJuMP.get_primal_upper_bound_hint\nBilevelJuMP.set_primal_lower_bound_hint\nBilevelJuMP.get_primal_lower_bound_hint","category":"page"},{"location":"reference/#BilevelJuMP.set_dual_upper_bound_hint","page":"API Reference","title":"BilevelJuMP.set_dual_upper_bound_hint","text":"set_dual_upper_bound_hint(cref, value)\n\nSet a upper bound to the dual variable of the constraint cref to value. This bound will not be dualized. The dual upper bound hint is used to help the solution method.\n\nSolution modes can be benefitted from this hint:\n\nBigMMode will use this information to compute a tighter bound for the dual variable.\nOther modes will be stabilized by the existence of the bounds on variables that would otherwise no be bounded.\nBounds that are not dualized are also useful for binary expansions of products of variables that can be done with QuadraticToBinary.jl.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_dual_upper_bound_hint","page":"API Reference","title":"BilevelJuMP.get_dual_upper_bound_hint","text":"get_dual_upper_bound_hint(cref)\n\nGet the upper bound to the dual variable of the constraint cref that was set with set_dual_upper_bound_hint.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_dual_lower_bound_hint","page":"API Reference","title":"BilevelJuMP.set_dual_lower_bound_hint","text":"set_dual_lower_bound_hint(cref, value)\n\nSet a lower bound to the dual variable of the constraint cref to value. This bound will not be dualized. The dual lower bound hint is used to help the solution method.\n\nSolution modes can be benefitted from this hint:\n\nBigMMode will use this information to compute a tighter bound for the dual variable.\nOther modes will be stabilized by the existence of the bounds on variables that would otherwise no be bounded.\nBounds that are not dualized are also useful for binary expansions of products of variables that can be done with QuadraticToBinary.jl.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_dual_lower_bound_hint","page":"API Reference","title":"BilevelJuMP.get_dual_lower_bound_hint","text":"get_dual_lower_bound_hint(cref)\n\nGet the lower bound to the dual variable of the constraint cref that was set with set_dual_lower_bound_hint.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_primal_upper_bound_hint","page":"API Reference","title":"BilevelJuMP.set_primal_upper_bound_hint","text":"set_primal_upper_bound_hint(vref, value)\n\nSet a upper bound to the prima variable vref to value. This bound will not be dualized. The upper bound hint is used to help the solution method.\n\nSolution modes can be benefitted from this hint:\n\nBigMMode will use this information to compute a tighter bound for the primal constraint variable.\nOther modes will be stabilized by the existence of the bounds on variables that would otherwise no be bounded.\nBounds that are not dualized are also useful for binary expansions of products of variables that can be done with QuadraticToBinary.jl.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_primal_upper_bound_hint","page":"API Reference","title":"BilevelJuMP.get_primal_upper_bound_hint","text":"get_primal_upper_bound_hint(cref)\n\nGet the upper bound to the primal variable of the constraint cref that was set with set_primal_upper_bound_hint.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_primal_lower_bound_hint","page":"API Reference","title":"BilevelJuMP.set_primal_lower_bound_hint","text":"set_primal_lower_bound_hint(vref, value)\n\nSet a lower bound to the prima variable vref to value. This bound will not be dualized. The lower bound hint is used to help the solution method.\n\nSolution modes can be benefitted from this hint:\n\nBigMMode will use this information to compute a tighter bound for the primal constraint variable.\nOther modes will be stabilized by the existence of the bounds on variables that would otherwise no be bounded.\nBounds that are not dualized are also useful for binary expansions of products of variables that can be done with QuadraticToBinary.jl.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_primal_lower_bound_hint","page":"API Reference","title":"BilevelJuMP.get_primal_lower_bound_hint","text":"get_primal_lower_bound_hint(cref)\n\nGet the lower bound to the primal variable of the constraint cref that was set with set_primal_lower_bound_hint.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Attributes-getters-and-setters","page":"API Reference","title":"Attributes getters and setters","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BilevelJuMP.lower_objective_value\nBilevelJuMP.build_time\nBilevelJuMP.set_mode\nBilevelJuMP.get_mode\nBilevelJuMP.unset_mode\nBilevelJuMP.set_copy_names\nBilevelJuMP.get_copy_names\nBilevelJuMP.unset_copy_names\nBilevelJuMP.set_pass_start\nBilevelJuMP.get_pass_start\nBilevelJuMP.unset_pass_start","category":"page"},{"location":"reference/#BilevelJuMP.lower_objective_value","page":"API Reference","title":"BilevelJuMP.lower_objective_value","text":"lower_objective_value(model::BilevelModel; result::Int = 1)\n\nReturn the value of the objective function of the lower level problem.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.build_time","page":"API Reference","title":"BilevelJuMP.build_time","text":"build_time(model::BilevelModel)\n\nReturn the time it took to build the model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_mode","page":"API Reference","title":"BilevelJuMP.set_mode","text":"set_mode(bm::BilevelModel, mode::AbstractBilevelSolverMode)\n\nSet the mode of a bilevel model.\n\n\n\n\n\nset_mode(ci::BilevelVariableRef, mode::AbstractBilevelSolverMode)\n\nSet the mode of a constraint. This is used in MixedMode reformulations.\n\n\n\n\n\nset_mode(vi::BilevelVariableRef, mode::AbstractBilevelSolverMode)\n\nSet the mode of the bounds of a variable. This is used in MixedMode reformulations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_mode","page":"API Reference","title":"BilevelJuMP.get_mode","text":"get_mode(ci::BilevelConstraintRef)\n\nGet the mode of a constraint. This is used in MixedMode reformulations.\n\n\n\n\n\nget_mode(vi::BilevelVariableRef)\n\nGet the mode of the bounds of a variable. This is used in MixedMode reformulations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.unset_mode","page":"API Reference","title":"BilevelJuMP.unset_mode","text":"unset_mode(ci::BilevelConstraintRef)\n\nUnset the mode of a constraint. This will use the default mode for the constraint. This is used in MixedMode reformulations.\n\n\n\n\n\nunset_mode(vi::BilevelVariableRef)\n\nUnset the mode of the bounds of a variable. This will use the default mode for the bounds. This is used in MixedMode reformulations.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_copy_names","page":"API Reference","title":"BilevelJuMP.set_copy_names","text":"set_copy_names(model::BilevelModel)\n\nSet the copy_names attribute of the solver to true.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_copy_names","page":"API Reference","title":"BilevelJuMP.get_copy_names","text":"get_copy_names(model::BilevelModel)\n\nReturn the value of the copy_names attribute of the solver.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.unset_copy_names","page":"API Reference","title":"BilevelJuMP.unset_copy_names","text":"unset_copy_names(model::BilevelModel)\n\nSet the copy_names attribute of the solver to false.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.set_pass_start","page":"API Reference","title":"BilevelJuMP.set_pass_start","text":"set_pass_start(model::BilevelModel)\n\nActivate passing start values (both primal and dual) to the solver.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.get_pass_start","page":"API Reference","title":"BilevelJuMP.get_pass_start","text":"get_pass_start(model::BilevelModel)\n\nChecks if passing start values (both primal and dual) to the solver is activated.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BilevelJuMP.unset_pass_start","page":"API Reference","title":"BilevelJuMP.unset_pass_start","text":"unset_pass_start(model::BilevelModel)\n\nDeactivate passing start values (both primal and dual) to the solver.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/tutorials/modes.jl\"","category":"page"},{"location":"tutorials/modes/#Modes-overview","page":"Modes overview","title":"Modes overview","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"There are several ways to solve bilevel problems with BilevelJuMP. The main difference between them is the way the complementarity constraints are reformulated. The reformulation method is set with the mode option of the BilevelModel constructor.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"The modes available are:","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"BilevelJuMP.SOS1Mode(): uses SOS1 constraints to model complementarity constraints and solve the problem with MIP solvers (Cbc, Xpress, Gurobi, CPLEX, SCIP).\nBilevelJuMP.IndicatorMode(): uses Indicator constraints to model   complementarity constraints and solve the problem with MIP solvers (Cbc,   Xpress, Gurobi, CPLEX, SCIP).\nBilevelJuMP.BigMMode(): uses the Fortuny-Amat and McCarl   reformulation that requires a MIP solver with very basic functionality,   i.e., just binary variables are needed. The main drawback of this method is   that one must provide bounds for all primal and dual variables. However, if   good bounds are provided, this method can be more efficient than the   previous. Bound hints to compute the big-Ms can be passed with the methods:   set_primal_(upper\\lower)_bound_hint(variable, bound), for primals; and   set_dual_(upper\\lower)_bound_hint(constraint, bound) for duals. We can   also call FortunyAmatMcCarlMode(primal_big_M = vp, dual_big_M = vd),   where vp and vd are, respectively, the big M fallback values for   primal and dual variables, these are used when some variables have no given   bounds, otherwise the given bounds are used instead.\nBilevelJuMP.ProductMode(): reformulates the complementarity constraints as   products so that the problem can be solved by NLP (Ipopt, KNITRO) solvers or   even MIP solvers with the aid of binary expansions   (see QuadraticToBinary.jl). Note that binary expansions require variables   to have upper and lower bounds. Also, note that the Gurobi solver supports   products, but requires   setting the \"NonConvex\" options.\nBilevelJuMP.MixedMode(default = mode): where mode is one of the other   modes described above. With this method it is possible to set complementarity   reformulations per constraint with BilevelJuMP.set_mode(constraint, mode),   where constraint is a constraint of the bilevel problem and mode is one   of the modes described above. If no mode is set for a constraint, the   default mode is used instead. To set a mode to reformulate variables   bounds use: BilevelJuMP.set_mode(variable, mode).\nBilevelJuMP.StrongDualityMode: this mode is not a complementarity   reformulation method, instead, all complementarity constraints are replaced   by constraints enforcing the strong duality.   This mode is especially amenable for NLP solvers (Ipopt, KNITRO).   MIP solvers can also be used but they will have to deal with the products   of variables crated or the will have to be used in conjunction with   QuadraticToBinary.jl.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"The following example shows how to solve a classic bilevel problem.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"We start loading all libraries needed for this example.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"using BilevelJuMP, QuadraticToBinary, HiGHS, Ipopt","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"Now we create a bilevel model with the BilevelModel constructor with no solver nor mode specified.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"model = BilevelModel()\n\n@variable(Lower(model), x)\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n@constraints(Upper(model), begin\n    x <= 5\n    y <= 8\n    y >= 0\nend)\n\n@objective(Lower(model), Min, -x)\n@constraints(Lower(model), begin\n    c1,  x +  y <= 8\n    c2, 4x +  y >= 8\n    c3, 2x +  y <= 13\n    c4, 2x - 7y <= 0\nend)","category":"page"},{"location":"tutorials/modes/#BigMMode-and-HiGHS.Optimizer","page":"Modes overview","title":"BigMMode and HiGHS.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, HiGHS.Optimizer)\n\nBilevelJuMP.set_mode(model,\n    BilevelJuMP.BigMMode(primal_big_M = 100, dual_big_M = 100))\n\noptimize!(model)\n\nobjective_value(model)\n@assert abs(objective_value(model) - (3 * (7/2 * 8/15) + 8/15)) < 1e-1 # src","category":"page"},{"location":"tutorials/modes/#SOS1Mode-and-SCIP.Optimizer","page":"Modes overview","title":"SOS1Mode and SCIP.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, SCIP.Optimizer)\n\nBilevelJuMP.set_mode(model, BilevelJuMP.SOS1Mode())\n\noptimize!(model)\n\nobjective_value(model)","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"info: Info\nThis code was not executed because SCIP might have a non-standard intallation procedure in windows.","category":"page"},{"location":"tutorials/modes/#IndicatorMode-and-SCIP.Optimizer","page":"Modes overview","title":"IndicatorMode and SCIP.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, SCIP.Optimizer)\n\nBilevelJuMP.set_mode(model, BilevelJuMP.IndicatorMode())\n\noptimize!(model)\n\nobjective_value(model)","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"info: Info\nThis code was not executed because SCIP might have a non-standard intallation procedure in windows.","category":"page"},{"location":"tutorials/modes/#ProductMode-and-Ipopt.Optimizer","page":"Modes overview","title":"ProductMode and Ipopt.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, Ipopt.Optimizer)\n\nBilevelJuMP.set_mode(model, BilevelJuMP.ProductMode())\n\noptimize!(model)\n\nobjective_value(model)\n\n@assert abs(objective_value(model) - (3 * (7/2 * 8/15) + 8/15)) < 1e-1 # src","category":"page"},{"location":"tutorials/modes/#StrongDualityMode-and-Ipopt.Optimizer","page":"Modes overview","title":"StrongDualityMode and Ipopt.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, Ipopt.Optimizer)\n\nBilevelJuMP.set_mode(model, BilevelJuMP.StrongDualityMode())\n\noptimize!(model)\n\nobjective_value(model)\n\n@assert abs(objective_value(model) - (3 * (7/2 * 8/15) + 8/15)) < 1e-1 # src","category":"page"},{"location":"tutorials/modes/#MixedMode-and-SCIP.Optimizer","page":"Modes overview","title":"MixedMode and SCIP.Optimizer","text":"","category":"section"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"set_optimizer(model, SCIP.Optimizer)\n\nBilevelJuMP.set_mode(model, BilevelJuMP.MixedMode(default = SOS1Mode()))\n\nBilevelJuMP.set_mode(c1, BilevelJuMP.IndicatorMode())\n\nBilevelJuMP.set_mode(c3, BilevelJuMP.SOS1Mode())\n\noptimize!(model)\n\nobjective_value(model)","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"info: Info\nThis code was not executed because SCIP might have a non-standard intallation procedure in windows.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"info: Info\nView this file on Github.","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"","category":"page"},{"location":"tutorials/modes/","page":"Modes overview","title":"Modes overview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/MibS_example2.jl\"","category":"page"},{"location":"examples/MibS_example2/#Example-2-on-MibS","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"","category":"section"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Model of the problem First level","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"min_x 2x -4y + 10z\nnotag st\n-3x + 2y + 2z leq 12\nx + 2y leq 20\nx leq 10\nx in mathbbZ z in mathbbB","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Second level","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"min_y y\nnotag st\n2x - y + 3z= 7\n-2x + 4y = 16\ny = 5\ny in mathbbZ","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"using BilevelJuMP\nusing Test\nusing MibS_jll\n\nmodel = BilevelModel()","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Upper level variables","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@variable(Upper(model), x, Int)\n@variable(Upper(model), z, Bin)\n\n#Lower level variables\n@variable(Lower(model), y, Int)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Upper level objecive function","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@objective(Upper(model), Min, 2x - 4y + 10z)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Upper constraints","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@constraints(Upper(model), begin\n    u1, -3x + 2y + 5z <= 12\n    u2, x + 2y <= 20\n    u3, x <= 10\nend)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Lower objective function","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@objective(Lower(model), Min, y)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Lower constraints","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@constraint(Lower(model), l1, 2x - y + 3z <= 7)\n@constraint(Lower(model), l2, -2x + 4y <= 16)\n@constraint(Lower(model), l3, y <= 5)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Using MibS Solver","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"solution = BilevelJuMP.solve_with_MibS(model, MibS_jll.mibs)","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"Auto testing","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"@test solution.status == true\n@test solution.objective ≈ -8.0\n@test solution.nonzero_upper == Dict(0 => 6.0)\n@test solution.nonzero_lower == Dict(0 => 5.0)\n@test solution.all_upper[\"x\"] == 6.0\n@test solution.all_upper[\"z\"] == 0\n@test solution.all_lower[\"y\"] == 5.0","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"","category":"page"},{"location":"examples/MibS_example2/","page":"Example 2 on MibS","title":"Example 2 on MibS","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/tutorials/conic_lower.jl\"","category":"page"},{"location":"tutorials/conic_lower/#Conic-Bilevel-and-Mixed-Mode","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"","category":"section"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"Here we present a simple bilevel program with a conic lower level model described in example 3.3 from Chi, et al. 2014.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"beginalign\n    max_x in mathbbR quad x + 3y_1 \n    textitst quad 2 leq x leq 6\n     hspace28pt y(x) in argmin_yin mathbbR^3 -y_1\n             hspace58pt textitst quad x + y_1 leq 8 \n             hspace76pt quad x + 4y_1 geq 8 \n             hspace76pt  quad x + 2y_1 leq 12 \n             hspace76pt  quad y in SOC_3 labeleq-soc\nendalign","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"In this problem most of the constraints are regular linear constraints while the last one is a second order cone constraint. Such constraint ensures that the vector y belongs to a second order cone of dimension 3, that is: y_1 geq sqrty_2^2 + y_3^2.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"This problem can be encoded using regular JuMP syntax for conic programs:","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"using BilevelJuMP\nmodel = BilevelModel()\n@variable(Upper(model), x)\n@variable(Lower(model), y[i=1:3])\n@objective(Upper(model), Min, x + 3y[1])\n@constraint(Upper(model), x >= 2)\n@constraint(Upper(model), x <= 6)\n@objective(Lower(model), Min, - y[1])\n@constraint(Lower(model), con1, x +  y[1] <=  8)\n@constraint(Lower(model), con2, x + 4y[1] >=  8)\n@constraint(Lower(model), con3, x + 2y[1] <= 12)\n@constraint(Lower(model), con4, y in SecondOrderCone())","category":"page"},{"location":"tutorials/conic_lower/#NLP-solution-and-start-values","page":"Conic Bilevel and Mixed Mode","title":"NLP solution and start values","text":"","category":"section"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"We can set, for instance, the product reformulation and selected Ipopt as a solver. As Ipopt does not have native support for second order cones, we use the non-default MOI bridge SOCtoNonConvexQuad to convert second order cones into quadratic constraints.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"using Ipopt\nBilevelJuMP.set_mode(model, BilevelJuMP.ProductMode(1e-5))\nset_optimizer(model,\n    ()->MOI.Bridges.Constraint.SOCtoNonConvexQuad{Float64}(Ipopt.Optimizer()))\noptimize!(model)","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"The user could also use the alternative JuMP syntax:","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"set_start_value(x, 6)\nset_dual_start_value(con2, 0)","category":"page"},{"location":"tutorials/conic_lower/#MIP-solution-and-mixed-mode","page":"Conic Bilevel and Mixed Mode","title":"MIP solution and mixed mode","text":"","category":"section"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"Alternatively, we could have used a Mixed Integer Second Order Cone Program (MISOCP) solver together with binary expansions. Complementarity of conic constraints is more difficult to handle because they require a sum of products that cannot be reformulated with other methods. Therefore, we rely on product reformulation for conic constraints. However, we can use other reformulations like indicator constraints for the non-conic constraints. Mixing the two of them can be done with Mixed Mode.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"The following code describes how to solve the problem with a MISOCP based solver.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"using Xpress\nusing QuadraticToBinary\nset_optimizer(model,\n    ()->QuadraticToBinary.Optimizer{Float64}(Xpress.Optimizer(),lb=-10,ub=10))\nBilevelJuMP.set_mode(model,\n    BilevelJuMP.MixedMode(default = BilevelJuMP.IndicatorMode()))\nBilevelJuMP.set_mode(con4, BilevelJuMP.ProductMode(1e-5))\noptimize!(model)","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"info: Info\nThis code was not executed because Xpress requires a commercial license. Other solvers supporting MISOCP could be used such as Gurobi and CPLEX.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"We set the reformulation method as Mixed Mode and selected Indicator constraints to be the default for the case in which we do not explicitly specify the reformulation. Then we set product mode for the second order cone reformulation.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"Binary expansions require bounded variables, hence the QuadraticToBinary meta-solver accepts fallback to upper and lower bounds (\\texttt{ub} and \\texttt{lb}), used for variables with no explicit bounds.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"info: Info\nView this file on Github.","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"","category":"page"},{"location":"tutorials/conic_lower/","page":"Conic Bilevel and Mixed Mode","title":"Conic Bilevel and Mixed Mode","text":"This page was generated using Literate.jl.","category":"page"},{"location":"background/#Bilevel-Optimization","page":"Background Information","title":"Bilevel Optimization","text":"","category":"section"},{"location":"background/","page":"Background Information","title":"Background Information","text":"Bilevel optimization is a vast discipline with a long (50+ years) history. We will not attempt to present a bilevel optimization introduction here. Instead, we point the reader to the excelent text:","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"A Gentle and Incomplete Introduction to Bilevel Optimization","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"by Yasmine Beck and Martin Schmidt.","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"The interested reader can find more information in books:","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"Dempe 2002\nBard 2013\nDempe et al. 2015","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"and in other reviews:","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"Vicente and Calamai 1994\nColson et al. 2007\nKalashnikov et al. 2015\nDempe (2018)","category":"page"},{"location":"background/#Bilevel-Optimization-in-BilevelJuMP","page":"Background Information","title":"Bilevel Optimization in BilevelJuMP","text":"","category":"section"},{"location":"background/","page":"Background Information","title":"Background Information","text":"In BileveJuMP focus on the following bilevel problem form:","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"beginaligned\n    min_x textbfy z  f_0(x textbfy z) \n    textitst  f_i(x textbfy z) in mathcalS_i quad i = 1 ldots k \n         x(z) textbfy(z) in\n     beginalignedt\n        argmin_x textbfy  frac12x z^top Q x z + a_0^top x+ d_0^top z + b_0\n            textitst  A_i x + D_i z + b_i in mathcalC_i quad   y_i quad quad i = 1 ldots m\n     endaligned\nendaligned","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"where z in mathbbR^l and x in mathbbR^n are, respectively, from upper and lower-level primal decision variables. Vectors of lower level dual decision variables are represented individually, by y_1 in mathbbR^p_1 ldots y_m in mathbbR^p_m, or jointly, by the m-tuple textbfy = (y_1 ldots y_m). The square brackets cdot cdot represent the stacking of two vectors or scalars. Thus, xz is a (n+l)–vector with the elements of x and z stacked. The numbers of constraints in the upper and lower problems are given by k and m, respectively. Q, a_i, d_i, b_i, A_i, D_i are matrices (upper case) and vectors (lower case) of constants of the lower level problem and mathcalC_i subset mathbbR^p_i are convex conic sets. The functions f_i can be linear, quadratic, or non-linear. The sets mathcalS_iin mathbbR^q_i can be convex cones, as in the lower level, but can also represent other sets, such as the sets of integers or binary variables. We use the \"function-in-set\" notation following the MOI definition of mathematical optimization problems. As in traditional bilevel programming, z is decided in the upper level and passed to the lower level as a parameter and x might be seen as an upper-level variable constrained to be an optimal solution of the lower level. Also, we only consider optimistic bilevel problems. In short, the solution of the lower level will be the one that optimizes the upper level in case of degeneracy.","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"For more information see our paper:","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"@article{diasgarcia2022bileveljump,\n    title={{BilevelJuMP. jl}: {M}odeling and solving bilevel optimization in {J}ulia},\n    author={{Dias Garcia}, Joaquim and Bodin, Guilherme and Street, Alexandre},\n    journal={arXiv preprint arXiv:2205.02307},\n    year={2022}\n}","category":"page"},{"location":"background/","page":"Background Information","title":"Background Information","text":"Here is the pdf.","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example4.jl\"","category":"page"},{"location":"examples/FOBP_example4/#Foundations-of-Bilevel-Programming:-Example-4","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"","category":"section"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 5.1, Page 127. url","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Model of the problem","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"First level","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"min x^2 + y\nnotag st\n-x-yleq 0","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Second level","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"min x\nnotag st\nx geq 0","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Global variables","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"atol = 1e-3","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Upper level variables","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@variable(Upper(model), y, start = 0)\n\n#Lower level variables\n@variable(Lower(model), x, start = 0)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Upper level objecive function","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@objective(Upper(model), Min, x^2 + y)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Upper level constraints","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@constraint(Upper(model), u1, -x - y <= 0)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Lower objective function","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@objective(Lower(model), Min, x)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Lower constraints","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@constraint(Lower(model), l1, x >= 0)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"Auto testing","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"@test objective_value(model) ≈ 0 atol = atol\n@test value(x) ≈ 0 atol = atol\n@test value(y) ≈ 0 atol = atol","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"","category":"page"},{"location":"examples/FOBP_example4/","page":"Foundations of Bilevel Programming: Example 4","title":"Foundations of Bilevel Programming: Example 4","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#BilevelJuMP.jl-Documentation","page":"Home","title":"BilevelJuMP.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BilevelJuMP is a package for modeling and solving bilevel optimization problems in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As an extension of the JuMP modeling language, BilevelJuMP allows users to employ the usual JuMP syntax with minor modifications to describe the problem and query solutions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Many modeling features are available in BilevelJuMP, some of which are unique while others are also not widely available. The main features supported are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Arbitrary JuMP models in the upper level (NLP, Conic, MIP)\nConic constraints and quadratic objectives in the lower-level\nDual variables of the lower level in the upper level\nMPEC reformulations with MIP or NLP solvers\nMixedMode MPEC reformulation: select the best reformulation for each constraint separately","category":"page"},{"location":"","page":"Home","title":"Home","text":"The currently available methods are based on re-writing the problem using the KKT conditions of the lower level. For that we make strong use of Dualization.jl","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install BilevelJuMP as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"BilevelJuMP\")","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Learn the basics of JuMP and Julia in the JuMP documentation\nFollow the tutorials in this manual","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need help, please open a GitHub issue.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BilevelJuMP.jl is licensed under the MIT License.","category":"page"},{"location":"#Citing-BilevelJuMP.jl","page":"Home","title":"Citing BilevelJuMP.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use BilevelJuMP.jl, we ask that you please cite the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{diasgarcia2022bileveljump,\n    title={{BilevelJuMP. jl}: {M}odeling and solving bilevel optimization in {J}ulia},\n    author={{Dias Garcia}, Joaquim and Bodin, Guilherme and Street, Alexandre},\n    journal={arXiv preprint arXiv:2205.02307},\n    year={2022}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here is the pdf.","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/PHTP_example1.jl\"","category":"page"},{"location":"examples/PHTP_example1/#Foundations-of-Bilevel-Programming:-Example-6","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"","category":"section"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"This example is from the book Princeton Handbook of Test Problems in Local and Global Optimization Dempe, Chapter 9.3.2 -parg 221 url","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Here, only the second level is described","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Model of the problem First level","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"min (x-5)^2+(2y+1)^2\nnotag st\nx geq 0\ny geq 0","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Second level","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"min (y-1)^2-15xy\nnotag st\n-3x+y leq -3\nx-05y leq 4\nx+y leq 7","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"using BilevelJuMP\nusing Ipopt\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer; mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Global variables","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"atol = 1e-3","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Upper level variables","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"@variable(Upper(model), x)\n\n#Lower level variables\n@variable(Lower(model), y)","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Upper level objecive function","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"@objective(Upper(model), Min, (x - 5)^2 + (2y + 1)^2)","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Upper level constraints","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"@constraint(Upper(model), x >= 0)\n@constraint(Upper(model), y >= 0) # only in lowrrin GAMS","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Lower objective function","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"@objective(Lower(model), Min, (y - 1)^2 - 1.5 * x * y)","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Lower constraints","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"@constraint(Lower(model), -3x + y <= -3)\n@constraint(Lower(model), x - 0.5y <= 4)\n@constraint(Lower(model), x + y <= 7)","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)\n\n@test value(x) ≈ 1 atol = atol\n@test value(y) ≈ 0 atol = atol","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"","category":"page"},{"location":"examples/PHTP_example1/","page":"Foundations of Bilevel Programming: Example 6","title":"Foundations of Bilevel Programming: Example 6","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/tutorials/getting_started.jl\"","category":"page"},{"location":"tutorials/getting_started/#Getting-started-with-BilevelJuMP","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"This is a quick introduction to modeling and solving bilevel optimization with BilevelJuMP.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"If you are new to Julia, start with the Getting started with Julia from the JuMP documentation.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"If you are new to JuMP, start with the Getting started with JuMP from the JuMP documentation.","category":"page"},{"location":"tutorials/getting_started/#Installation","page":"Getting started with BilevelJuMP","title":"Installation","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"BilevelJuMP is a JuMP extension that be installed by using the built-in package manager.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"import Pkg\nPkg.add(\"BilevelJuMP\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"That is all you need to model a bilevel optimization problem, but we want to also solve the problems. Therefore we need a solver, one such solver is HiGHS.Optimizer, which is provided by the HiGHS.jl package.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"import Pkg\nPkg.add(\"HiGHS\")","category":"page"},{"location":"tutorials/getting_started/#A-first-example","page":"Getting started with BilevelJuMP","title":"A first example","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"We will solve the following bilevel optimization problem using BilevelJuMP and HiGHS. First we take a look in the entire code then we go through it step-by-step.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Here is the example from Dempe (2002), Chapter 3.2, Page 25:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"beginalign*\n    min_x y  3x + y \n    textitst  x leq 5 \n         y leq 8 \n         y geq 0 \n         x(y) in\n     beginalignedt\n        argmin_x  -x\n            textitst  x + y leq 8\n                 4x + y geq 8\n                 2x + y leq 13\n                 2x - 7y leq 0\n     endaligned\nendalign*","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Here is the complete code to model, solve and query results from the example:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"using BilevelJuMP\nusing HiGHS\n\nmodel = BilevelModel(\n    HiGHS.Optimizer,\n    mode = BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 100, dual_big_M = 100))\n\n@variable(Lower(model), x)\n\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n\n@constraint(Upper(model), u1, x <= 5)\n@constraint(Upper(model), u2, y <= 8)\n@constraint(Upper(model), u3, y >= 0)\n\n@objective(Lower(model), Min, -x)\n\n@constraint(Lower(model), l1, x +  y <= 8)\n@constraint(Lower(model), l2, 4x +  y >= 8)\n@constraint(Lower(model), l3, 2x +  y <= 13)\n@constraint(Lower(model), l4, 2x - 7y <= 0)\n\nprint(model)\n\noptimize!(model)\n\ntermination_status(model)\n\nprimal_status(model)\n\ndual_status(Lower(model))\n\ndual_status(Upper(model))\n\nobjective_value(model)\n\nobjective_value(Lower(model))\n\nobjective_value(Upper(model))\n\nvalue(x)\n\nvalue(y)\n\ndual(l1)\n\ndual(l2)","category":"page"},{"location":"tutorials/getting_started/#Step-by-step","page":"Getting started with BilevelJuMP","title":"Step-by-step","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Once installed, BilevelJuMP can be loaded into julia:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"using BilevelJuMP","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Note that JuMP comes inside BilevelJuMP, and does not need to be installed separately. Once loaded, all JuMP functions are exported along with the BilevelJuMP additional functions.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"We include a solver, in this case HiGHS:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"using HiGHS","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Just like regular JuMP has the Model function to initialize an optimization problem, BilevelJuMP has the BilevelModel function that takes a solver as a first positional argument, in this case HiGHS.Optimizer and a mode keyword argument that selects a bilevel solution method, in this case, BilevelJuMP.FortunyAmatMcCarlMode. Note that BilevelJuMP.FortunyAmatMcCarlMode takes two optional keyword arguments: primal_big_M and dual_big_M which have to be larger than the value of all primal and dual variavle sof the lower level respectively to guarantee that the solution is no eliminated.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"model = BilevelModel(\n    HiGHS.Optimizer,\n    mode = BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 100, dual_big_M = 100))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"For more on modes and solutions methods, see XXX.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"We can proceed, as usual in JuMP models and incrementally build our bilevel problem. We use the same macros as JuMP.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Variables are modeled using the @variable macro, but in bilevel problems we must define which level the variable is decided, then we use the Upper and Lower constructors to direct variable to the proper levels:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"@variable(Lower(model), x)\n\n@variable(Upper(model), y)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"The same goes for objective that are modeled with the @objective macro:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"@objective(Upper(model), Min, 3x + y)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"and constraints that are modeled with the @objective macro:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"@constraint(Upper(model), u1, x <= 5)\n@constraint(Upper(model), u2, y <= 8)\n@constraint(Upper(model), u3, y >= 0)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"repeat for the lower level:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"@objective(Lower(model), Min, -x)\n\n@constraint(Lower(model), l1, x +  y <= 8)\n@constraint(Lower(model), l2, 4x +  y >= 8)\n@constraint(Lower(model), l3, 2x +  y <= 13)\n@constraint(Lower(model), l4, 2x - 7y <= 0)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"display the model","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"print(model)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"solve the bilevel problem, which will combine a mode (in this case FortunyAmatMcCarlMode) and a solver (in this case HiGHS):","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"optimize!(model)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"check the termination_status to understand why the solver stopped:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"termination_status(model)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"check the primal_status to check if there is a feasible solution available:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"primal_status(model)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"check the dual_status to check if there is a dual solution available for the lower level:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"dual_status(Lower(model))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"do the same for the upper level:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"dual_status(Upper(model))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"info: Info\nMost method will not support upper level duals.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"info: Info\nJuMP's dual_status is not available to BilevelModel's although you can query dual_status of each level.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Query the objecive value of the bilevel model","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"objective_value(model)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Query the objective value of the lower level and the upper level","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"objective_value(Lower(model))\n\nobjective_value(Upper(model))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"Obtain primal solutions:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"value(x)\n\nvalue(y)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"and dual solutions:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"dual(l1)\n\ndual(l2)","category":"page"},{"location":"tutorials/getting_started/#Model-basics","page":"Getting started with BilevelJuMP","title":"Model basics","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"We created a BilevelModel passing the optimizer and mode and initialization:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"model = BilevelModel(\n    HiGHS.Optimizer,\n    mode = BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 100, dual_big_M = 100))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"We could do piece by piece","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"model = BilevelModel()\n\nset_optimizer(model, HiGHS.Optimizer)\n\nBilevelJuMP.set_mode(model,\n    BilevelJuMP.FortunyAmatMcCarlMode(primal_big_M = 100, dual_big_M = 100))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"warning: Warning\nBoth BilevelModel and set_optimizer take a optimizer constructor, in this case HiGHS.Optimizer. Note that HiGHS.Optimizer() returns an instance of the HiGHS.Optimizer. Hence, and alternative way to pass this solver would be: set_optimizer(model, () -> HiGHS.Optimizer()).() -> HiGHS.Optimizer() is a an anonymous function that returns an instance of the HiGHS.Optimizer.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"info: Info\nThere is no equivalent of JuMP's direct_model in BilevelJuMP.","category":"page"},{"location":"tutorials/getting_started/#Solver-options","page":"Getting started with BilevelJuMP","title":"Solver options","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"it is also possible to pass optimizers with attributes:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"model = BilevelModel(\n    optimizer_with_attributes(HiGHS.Optimizer, \"output_flag\" => false))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"or set such attributes separately:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"model = BilevelModel(HiGHS.Optimizer)\n\nset_attribute(model, \"output_flag\", false)\n\nget_attribute(model, \"output_flag\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"info: Info\nView this file on Github.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with BilevelJuMP","title":"Getting started with BilevelJuMP","text":"This page was generated using Literate.jl.","category":"page"}]
}
