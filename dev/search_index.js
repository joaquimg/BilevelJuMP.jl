var documenterSearchIndex = {"docs":
[{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example2.2.jl\"","category":"page"},{"location":"examples/FOBP_example2.2/#Foundations-of-Bilevel-Programming:-Example-2.1","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"","category":"section"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.2, Page 25. url Moving the bound on x to lower level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Model of the problem","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"First level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Min 3x + y\ns.t.\n0 <= y <=8","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Second level","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Min -x\ns.t.\nx + y <= 8\n4x + y >= 8\n2x + y <= 13\n2x - y <= 0\nx <= 5","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"using BilevelJuMP\nusing Ipopt\nusing JuMP\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer, mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@variable(Lower(model), x, start = 3.5 * 8 / 15)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@variable(Upper(model), y, start = 8 / 15)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@objective(Upper(model), Min, 3x + y)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@constraint(Upper(model), y <= 8)\n@constraint(Upper(model), y >= 0)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@objective(Lower(model), Min, -x)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"@constraint(Lower(model), x +  y <= 8)\n@constraint(Lower(model), 4x +  y >= 8)\n@constraint(Lower(model), 2x +  y <= 13)\n@constraint(Lower(model), 2x - 7y <= 0)\n@constraint(Lower(model), x <= 5)","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"optimize!(model)\n\n@test objective_value(model) ≈ 3 * (3.5 * 8 / 15) + (8 / 15) atol=1e-3\n@test value(x) ≈ 3.5 * 8 / 15 atol=1e-6\n@test value(y) ≈ 8 / 15 atol=1e-6","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"","category":"page"},{"location":"examples/FOBP_example2.2/","page":"Foundations of Bilevel Programming: Example 2.1","title":"Foundations of Bilevel Programming: Example 2.1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example2.jl\"","category":"page"},{"location":"examples/FOBP_example2/#Foundations-of-Bilevel-Programming:-Example-2","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"","category":"section"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.2, Page 25. url Moving the bound on x to lower level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Model of the problem First level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"min 3x + y\nnotag st\nx leq 5\ny leq 8\ny geq 0","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Second level","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"\\min -x,\\\\\n\\notag s.t.\\\\\nx + y <= 8,\\\\\n4x + y >= 8,\\\\\n2x + y <= 13,\\\\\n2x - y <= 0,\\\\\nx <= 5\\\\","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"using BilevelJuMP\nusing Ipopt\nusing JuMP\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer, mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"First we need to define all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@variable(Upper(model), y, start = 8 / 15)\n@variable(Lower(model), x, start = 3.5 * 8 / 15)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Then we can add the objective and constraints of the upper problem: Upper level objective function","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@objective(Upper(model), Min, 3x + y)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Upper level constraints","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@constraints(Upper(model), begin\n    u1, x <= 5\n    u2, y <= 8\n    u3, y >= 0\nend)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Followed by the objective and constraints of the lower problem: Lower level objective function","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@objective(Lower(model), Min, -x)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Lower level constraints","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@constraint(Lower(model), l1,  x +  y <= 8)\n@constraint(Lower(model), l2, 4x +  y >= 8)\n@constraint(Lower(model), l3, 2x +  y <= 13)\n@constraint(Lower(model), l4, 2x - 7y <= 0)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"tip: Tip\nYou can use the singular @constraint macro or the plural @constraints!","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"We can also set hints for the variables associated with the problems.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"In this example, we know the duals on the lower constraints are in the set [-15, 15]:","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"for c in [l1, l2, l3, l4]\n    BilevelJuMP.set_dual_upper_bound(c, 15)\n    BilevelJuMP.set_dual_lower_bound(c, -15)\nend","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"While we think the primal variables are in [-10, 6] for x and [-1, 9] for y. These hints are optional. But supplying them (e.g., from domain knowledge) can be helpful for the solver.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"BilevelJuMP.set_primal_lower_bound_hint(x, -10)\nBilevelJuMP.set_primal_upper_bound_hint(x, 6)\nBilevelJuMP.set_primal_lower_bound_hint(y, -1)\nBilevelJuMP.set_primal_upper_bound_hint(y, 9)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"optimize!(model)","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"Automated testing","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"@test objective_value(model) ≈ 3 * (3.5 * 8 / 15) + (8 / 15) atol=1e-6\n@test BilevelJuMP.lower_objective_value(model) ≈ -3.5 * 8 / 15 atol=1e-6\n@test objective_value(Lower(model)) ≈ -3.5 * 8 / 15 atol=1e-6\n@test value(x) ≈ 3.5 * 8 / 15 atol=1e-6\n@test value(y) ≈ 8 / 15 atol=1e-6\n@test value(u1) ≈ 3.5 * 8 / 15 atol=1e-6\n@test value(l1) ≈ 4.5 * 8 / 15 atol=1e-6\n@test dual(l1) ≈ [0] atol=1e-6\n@test dual(l3) ≈ [0] atol=1e-6","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"","category":"page"},{"location":"examples/FOBP_example2/","page":"Foundations of Bilevel Programming: Example 2","title":"Foundations of Bilevel Programming: Example 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"EditURL = \"https://github.com/joaquimg/BilevelJuMP.jl/blob/master/docs/src/examples/FOBP_example3.jl\"","category":"page"},{"location":"examples/FOBP_example3/#Foundations-of-Bilevel-Programming:-Example-3","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"","category":"section"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"This example is from the book Foundations of Bilevel Programming by Stephan Dempe, Chapter 3.7, Page 59. url","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Model of the problem","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"First level","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"min sum_iin I x_i - z\nnotag st\ny^a_igeq 0 forall i in I\ny^a_ileq 1 forall i in I\ny^b_igeq 0 forall i in I\ny^b_ileq 1 forall i in I\ny^a_i + y^b_i = 1 forall i in I\nzgeq 0\nzleq 1\ny^a_1 + y^a_2 + y^a_3 geq z\n-y^b_1 - y^b_4 + y^a_3 geq z\ny^b_7 - y^b_6 + y^a_4 geq z\ny^a_5 + y^a_6 + y^a_7 geq z","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Second level","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"min -sum_iin Ix_i\nnotag st\nsum x_i geq 0\nx_i leq y^a_i forall iin I\nx_i leq y^b_i forall iin I\nI = 17","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"using BilevelJuMP\nusing Ipopt\nusing JuMP\nusing Test\n\nmodel = BilevelModel(Ipopt.Optimizer, mode = BilevelJuMP.ProductMode(1e-9))","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Global variables","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"I = 7 # maximum literals\nclauses = [[1,2,3],[-1,-4,3],[7,-6,4],[5,6,7]]\natol = 1e-6","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"First we need to create all of the variables in the upper and lower problems:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level variables","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@variable(Upper(model), ya[i=1:I])\n@variable(Upper(model), yb[i=1:I])\n@variable(Upper(model), z)\n\n\n#Lower level variables\n@variable(Lower(model), x[i=1:I])","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Then we can add the objective and constraints of the upper problem:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level objecive function","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@objective(Upper(model), Min, sum(x[i] for i in 1:I) - z)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Upper level constraints","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(Upper(model), ca, z <= 1)\n@constraint(Upper(model), cb, z >= 0)\n@constraint(Upper(model), c1[i=1:I], ya[i] >= 0)\n@constraint(Upper(model), c2[i=1:I], ya[i] <= 1)\n@constraint(Upper(model), c3[i=1:I], yb[i] >= 0)\n@constraint(Upper(model), c4[i=1:I], yb[i] <= 1)\n@constraint(Upper(model), c5[i=1:I], ya[i] + yb[i] == 1)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"for c in clauses","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(Upper(model), cc[k in eachindex(clauses)], sum(i > 0 ? ya[i] : yb[-i] for i in clauses[k]) >= z)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Followed by the objective and constraints of the lower problem:","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Lower objective function","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@objective(Lower(model), Min, -sum(x[i] for i in 1:I))","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Lower constraints","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@constraint(Lower(model), b1[i=1:I], x[i] >= 0)\n@constraint(Lower(model), b2[i=1:I], x[i] <= ya[i])\n@constraint(Lower(model), b3[i=1:I], x[i] <= yb[i])","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Initial Starting conditions","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"JuMP.set_start_value.(x, 0)\nJuMP.set_start_value.(ya, 1)\nJuMP.set_start_value.(yb, 0)\nJuMP.set_start_value(z, 1)\nfor i in 1:I\n    JuMP.set_dual_start_value.(b1, 0)\n    JuMP.set_dual_start_value.(b2, 0)\n    JuMP.set_dual_start_value.(b3, -1)\nend","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Now we can solve the problem and verify the solution again that reported by Dempe.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"optimize!(model)\nprimal_status(model)\ntermination_status(model)","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"Auto testing","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@test objective_value(model) ≈ -1 atol=atol\n@test value.(x) ≈ zeros(I) atol=atol\n@test value.(ya) ≈ ones(I) atol=atol\n@test value.(yb) ≈ zeros(I) atol=atol\n@test value(z) ≈ 1 atol=atol","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"@show dual.(b1) #≈ 6 atol=atol @show dual.(b2) #≈ 2 atol=atol @show dual.(b3) #≈ 2 atol=atol","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"","category":"page"},{"location":"examples/FOBP_example3/","page":"Foundations of Bilevel Programming: Example 3","title":"Foundations of Bilevel Programming: Example 3","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Example","page":"Manual","title":"Example","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"using JuMP, BilevelJuMP, Cbc\n\nmodel = BilevelModel(Cbc.Optimizer, mode = BilevelJuMP.SOS1Mode())\n\n@variable(Lower(model), x)\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n@constraints(Upper(model), begin\n    x <= 5\n    y <= 8\n    y >= 0\nend)\n\n@objective(Lower(model), Min, -x)\n@constraints(Lower(model), begin\n     x +  y <= 8\n    4x +  y >= 8\n    2x +  y <= 13\n    2x - 7y <= 0\nend)\n\noptimize!(model)\n\nobjective_value(model) # = 3 * (3.5 * 8/15) + 8/15 # = 6.13...\nvalue(x) # = 3.5 * 8/15 # = 1.86...\nvalue(y) # = 8/15 # = 0.53...","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The option BilevelJuMP.SOS1Mode() indicates that the solution method used will be a KKT reformulation emplying SOS1 to model complementarity constraints and solve the problem with MIP solvers (Cbc, Xpress, Gurobi, CPLEX, SCIP).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Alternatively, the option BilevelJuMP.IndicatorMode() is almost equivalent to the previous. The main difference is that it relies on Indicator constraints instead. This kind of constraints is available in some MIP solvers.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"A third and classic option it the BilevelJuMP.FortunyAmatMcCarlMode(), which relies on the Fortuny-Amat and McCarl big-M method that requires a MIP solver with very basic functionality, i.e., just binary variables are needed. The main drawback of this method is that one must provide bounds for all primal and dual variables. However, if the bounds are good, this method can be more efficient than the previous. Bound hints to compute the big-Ms can be passed with the methods: set_primal_(upper\\lower)_bound_hint(variable, bound), for primals; and set_dual_(upper\\lower)_bound(constraint, bound) for duals. We can also call FortunyAmatMcCarlMode(primal_big_M = vp, dual_big_M = vd), where vp and vd are, repspectively, the big M fallback values for primal and dual variables, these are used when some variables have no given bounds, otherwise the given bounds are used instead.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Another option is BilevelJuMP.ProductMode() that reformulates the complementarity constraints as products so that the problem can be solved by NLP (Ipopt, KNITRO) solvers or even MIP solvers with the aid of binary expansions (see QuadraticToBinary.jl). Note that binary expansions require variables to have upper and lower bounds.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Finally, one can use BilevelJuMP.MixedMode(default = mode) where mode is one of the other modes described above. With this method it is possible to set complementarity reformulations per constraint with BilevelJuMP.set_mode(ctr, mode).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"An alternative to complementarity constraint reformulation is the Strong Duality reformulation which add the constraint enforcing primal dual equality. The option is BilevelJuMP.StrongDualityMode(eps) where eps is the tolance on the enforcing constraint.","category":"page"},{"location":"manual/#Note-on-[QuadraticToBinary.jl](https://github.com/joaquimg/QuadraticToBinary.jl)","page":"Manual","title":"Note on QuadraticToBinary.jl","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"QuadraticToBinary.jl is a package that converts quadratic terms in constraints and objective. To do so the pack acts like a solver on top of the real solver and most data is forwarded directly to the solver itself. For many solvers it is enough to use:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Xpress.Optimizer()\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(SOLVER)\nBilevelModel(Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"However, this might lead to some solver not supporting certain functionality like Cbc. In this case we need to:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Cbc.Optimizer()\nCACHED_SOLVER = MOI.Utilities.CachingOptimizer(\n    MOI.Utilities.UniversalFallback(MOI.Utilities.Model{Float64}()), SOLVER)\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(CACHED_SOLVER)\nBilevelModel(()->Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Note that we used ()->Q_SOLVER instead of just Q_SOLVER because BilevelModel requires as constructor and not an instance of an object.","category":"page"},{"location":"manual/#Advanced-Features","page":"Manual","title":"Advanced Features","text":"","category":"section"},{"location":"manual/#Lower-level-dual-variables","page":"Manual","title":"Lower level dual variables","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Suppose you have a constraint b in the lower level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@constraint(Lower(model), b, ...)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is possible to access the dual variable of b to use it in the upper level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@variable(Upper(model), lambda, DualOf(b))","category":"page"},{"location":"manual/#Conic-lower-level","page":"Manual","title":"Conic lower level","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"BilevelJuMP allows users to write conic models in the lower level. However, solving this kind of problems is much harder and requires complex solution methods. Mosek's Conic MIP can be used with the aid of QuadraticToBinary.jl.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is also possible to solve Second Order Cone constrained models with Ipopt. In this case we need to add a special, non-standard bridge, to Ipopt as follows:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"IPO_OPT = Ipopt.Optimizer(print_level=0)\nIPO = MOI.Bridges.Constraint.SOCtoNonConvexQuad{Float64}(IPO_OPT)\nBilevelModel(()->IPO, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"#BilevelJuMP.jl-Documentation","page":"Home","title":"BilevelJuMP.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BilevelJuMP is a package for modeling and solving bilevel optimization problems in Julia. As an extension of the JuMP package, BilevelJuMP allows users to employ the usual JuMP syntax with minor modifications to describe the problem and query solutions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"BilevelJuMP is built on top of MathOptInterface and makes strong use of its features to reformulate the problem as a single level problem and solve it with available MIP, NLP, and other solvers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The currently available methods are based on re-writing the problem using the KKT conditions of the lower level. For that we make strong use of Dualization.jl","category":"page"}]
}
